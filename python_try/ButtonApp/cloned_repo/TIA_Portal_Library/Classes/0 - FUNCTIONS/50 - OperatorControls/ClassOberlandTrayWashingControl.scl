TYPE "typeOberlandTrayWashingControl"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   STRUCT
      inputs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // hardware inputs to the block
         i_xStartPB { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      END_STRUCT;
      outputs { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // hardware outputs from the block
         q_xOut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      END_STRUCT;

   END_STRUCT;



END_TYPE

FUNCTION_BLOCK "ClassOberlandTrayWashingControl"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      ioInterface : "typeOberlandTrayWashingControl";
	  ioWashingLIneInterface : "typeOberlandTrayWashingLineInterface";
   END_VAR

   VAR
      statStartPB { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
	  statStartTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
	  statStopTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
	  statSResetTrigger { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
	  statStartCommand { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
	  statStopCommand { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
	  statResetCommand { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      instStartTimeDelay {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
	  instStopTimeDelay {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
	  instResetTimeDelay {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      statState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;   // State Machine Step number
      statNumberOfStates { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt := 1;   // State Machine Number of Steps
      statReadyForState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..9] of Bool;
      statCycleCounter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : USInt;
   END_VAR

   VAR CONSTANT 
      NUMBER_OF_STATES_IN_STATE_MACHINE : USInt := 1;	  
	  START_BUTTON_DELAY : TIME := T#3S;
	  STOP_BUTTON_DELAY : TIME := T#10S;
	  RESET_BUTTON_DELAY : TIME := T#1S;
   END_VAR


BEGIN
	REGION BLOCK INFO HEADER
	  //===============================================================================
	  // OTOMAKEIT SOLUTIONS / (c)Copyright 2023
	  //-------------------------------------------------------------------------------
	  // Title:            ClassOberlandTrayWashingControl function block
	  //                   Designed for Oberland tray washing machine control 
	  //                   by ABCO 32916 project
	  // Parental class:   LOMS_InOutTypeFB
	  // Comment/Function: 
	  // Library/Family:   LOMS (Library OtoMakeit Solutions)
	  // Author:           Yuriy Mosiyenko, Otomakeit Solutions
	  // Tested with:      CPU1215FC DC/DC/Relay
	  // Engineering:      TIA Portal V17
	  // Restrictions:     
	  // Requirements:     PLC (S7-1200 / S7-1500)
	  //-------------------------------------------------------------------------------
	  // Change log table:
	  //             | Date       | Expert in charge       | Changes applied
	  //-------------|------------|------------------------|---------------------------
	  // Created     | 2024-08-08 | Yuriy Mosiyenko        | Created
	  // Last update | 2024-08-29 | Yuriy Mosiyenko        | Corrections
	  //===============================================================================
	  //Update comments:
	  //-------------------------------------------------------------------------------
	  //2024-08-29 - Created
	  //===============================================================================
	END_REGION
	
	REGION INIT
	  #statNumberOfStates := #NUMBER_OF_STATES_IN_STATE_MACHINE;
	  FOR #statCycleCounter:=0 TO #statNumberOfStates DO
	    #statReadyForState[#statCycleCounter] := FALSE;
	  END_FOR;

	  //Start button delay
	  instStartTimeDelay(IN := ioInterface.inputs.i_xStartPB, PT := #START_BUTTON_DELAY, Q => statStartTrigger);
	  //Stop button delay
	  instStopTimeDelay(IN := ioInterface.inputs.i_xStartPB, PT := #STOP_BUTTON_DELAY, Q => statStopTrigger);
	  //Reset button delay
	  instResetTimeDelay(IN := ioInterface.inputs.i_xStartPB, PT := #RESET_BUTTON_DELAY, Q => statSResetTrigger);

	  //If start button is pressed for RESET_BUTTON_DELAY time, reset the machine
	  //If start button is pressed for START_BUTTON_DELAY time, start the machine
	  //If start button is pressed for STOP_BUTTON_DELAY time, stop the machine
	  //Reset command does not reset the start and stop commands
	  //But start and stop commands reset each other
	  //Reset and Stop commands are only active while the button is pressed
	  //Start command is active until the stop command is received

	  //Start command
	  IF statStartTrigger THEN
	    statStartCommand := TRUE;
	  //Reset command
	  ELSIF statSResetTrigger THEN
	    statResetCommand := TRUE;
	  //Stop command
	  ELSIF statStopTrigger THEN
	    statStopCommand := TRUE;
		statStartCommand := FALSE;
		statResetCommand := FALSE;
	  ELSE
		statResetCommand := FALSE;
		statStopCommand := FALSE;
	  END_IF;
	  
	END_REGION INIT
	
	REGION READ INPUTS
	    
	END_REGION READ INPUTS
	
	REGION LOGIC
	    //State machine is not in use in this block
		//but I leave the template in case it will be needed in the future
	    REGION PRE-STATE MACHINE OPERATIONS
	        
	        
	    END_REGION PRE-STATE MACHINE OPERATONS
	    
	    REGION STATE MACHINE      
	      REGION STATE MACHINE CONTROL
	        //check conditions to change state
	        //replace FALSE with the condition
	        #statReadyForState[0] := FALSE;
	        #statReadyForState[1] := FALSE;
	        #statReadyForState[2] := FALSE;
	        #statReadyForState[3] := FALSE;
	        #statReadyForState[4] := FALSE;
	        #statReadyForState[5] := FALSE;
	        #statReadyForState[6] := FALSE;
	        #statReadyForState[7] := FALSE;
	        #statReadyForState[8] := FALSE;
	        #statReadyForState[9] := FALSE;
	        
	        //change state if condition is TRUE
	        FOR #statCycleCounter := 0 TO #statNumberOfStates-1 DO
	          IF #statReadyForState[#statCycleCounter] THEN
	            #statState := #statCycleCounter;
	          END_IF;
	        END_FOR;
	        
	        //do not go over the set number of steps 
	        IF #statState >= #statNumberOfStates THEN
	          #statState := 0;
	        END_IF;
	        
	      END_REGION STATE MACHINE CONTROL
	      
	      REGION STATE MACHINE STEPS
	        CASE #statState OF
	          0://STATE 0
	            REGION STATE 0
	              //operations in this block will be implemented only in this state
				;
				END_REGION STATE 0	            
	          1://STATE 1
				REGION STATE 1
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 1
	          2://STATE 2
				REGION STATE 2
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 2
	          3://STATE 3
				REGION STATE 3
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 3
	          4://STATE 4
				REGION STATE 4
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 4
	          5://STATE 5
				REGION STATE 5
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 5
	          6://STATE 6
				REGION STATE 6
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 6
	          7://STATE 7
				REGION STATE 7
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 7
	          8://STATE 8
				REGION STATE 8
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 8
	          9://STATE 9
				REGION STATE 9
	              //operations in this block will be implemented only in this state
	            ;
				END_REGION STATE 9
	          ELSE
	            ;
	        END_CASE;
	      END_REGION STATE MACHINE STEPS
	      
	    END_REGION STATE MACHINE
	    
	    REGION POST-STATE MACHINE OPERATIONS
	        //operations in this block will be implemented in each cycle, disregarding the state  
	        
	    END_REGION POST-STATE MACHINE OPERATONS
	    
	END_REGION LOGIC
	
	REGION WRITE OUTPUTS, CALL SUBFUNCTIONS
		//the control signals in this project are doing only two functions:
		//start the machine and reset the machine
		//the rest functionality is done by HMI interface
	    ioWashingLIneInterface.commands.xEnable := statStartCommand;
		ioWashingLIneInterface.commands.xFaultReset := statResetCommand;
	END_REGION WRITE OUTPUTS, CALL SUBFUNCTIONS
END_FUNCTION_BLOCK

